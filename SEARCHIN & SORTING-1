Q-1-Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return *an array of the
non-overlapping intervals that cover all the intervals in the input*.
A-1-
def merge_intervals(intervals):
    intervals.sort(key=lambda x: x[0])  # Sort intervals based on start time
    merged = []
    for interval in intervals:
        if not merged or interval[0] > merged[-1][1]:
            merged.append(interval)
        else:
            merged[-1][1] = max(merged[-1][1], interval[1])
    return merged
intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
merged_intervals = merge_intervals(intervals)
print(merged_intervals)





Q-2-Given an array `nums` with `n` objects colored red, white, or blue, sort them 
**[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the
order red, white, and blue.
We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
A-2-
def sortColors(nums):
    low = mid = 0
    high = len(nums) - 1

    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        elif nums[mid] == 2:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1
nums = [2, 0, 2, 1, 1, 0]
sortColors(nums)
print(nums)





Q-3-You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product
fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also 
bad.
Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be
bad.You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first 
bad version. You should minimize the number of calls to the API.
A-3-
def firstBadVersion(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2
        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left





Q-4-Given an integer array `nums`, return *the maximum difference between two successive elements in its sorted form*. If the array 
contains less than two elements, return `0`.
You must write an algorithm that runs in linear time and uses linear extra space.
A-4-
def maximumGap(nums):
    if len(nums) < 2:
        return 0

    max_num = max(nums)
    exp = 1
    n = len(nums)

    while max_num // exp > 0:
        count = [0] * 10
        output = [0] * n

        for num in nums:
            digit = (num // exp) % 10
            count[digit] += 1

        for i in range(1, 10):
            count[i] += count[i - 1]

        for i in range(n - 1, -1, -1):
            digit = (nums[i] // exp) % 10
            output[count[digit] - 1] = nums[i]
            count[digit] -= 1

        nums = output
        exp *= 10

    max_diff = 0
    for i in range(1, len(nums)):
        max_diff = max(max_diff, nums[i] - nums[i - 1])

    return max_diff






Q-5-Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is 
distinct.
A-5-
def containsDuplicate(nums):
    num_set = set()
    
    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)
    
    return False







Q-6-There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D 
integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` 
and `xend` You do not know the exact y-coordinates of the balloons.
Arrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with
`xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that 
can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.
Given the array `points`, return *the **minimum** number of arrows that must be shot to burst all balloons*.
A-6-
def findMinArrowShots(points):
    if not points:
        return 0

    points.sort(key=lambda x: x[1])  # Sort balloons based on end position
    arrows = 1  # Initialize with one arrow

    prev_end = points[0][1]
    for i in range(1, len(points)):
        if points[i][0] > prev_end:  # Need to shoot a new arrow
            arrows += 1
            prev_end = points[i][1]

    return arrows







Q-7-Given an integer array `nums`, return *the length of the longest **strictly increasing***
***subsequence***
A-7-
def lengthOfLIS(nums):
    n = len(nums)
    if n == 0:
        return 0

    dp = [1] * n  # Initialize dp array with 1

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)









Q-8-Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` 
such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.
Return `true` *if there is a **132 pattern** in* `nums`*, otherwise, return* `false`*.*
A-8-
def find132pattern(nums):
    n = len(nums)
    stack = []
    candidate_k = float('-inf')

    for i in range(n - 1, -1, -1):
        if nums[i] < candidate_k:
            return True
        while stack and nums[i] > stack[-1]:
            candidate_k = stack.pop()
        stack.append(nums[i])

    return False


























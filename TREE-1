Q-1-Given a binary tree, your task is to find subtree with maximum sum in tree.
Examples:
Input1 :       
       1

     /   \

   2      3

  / \    / \

4   5  6   7
Output1 : 28
As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.
Input2 :
       1

     /    \

  -2      3

  / \    /  \

4   5  -6   2
Output2 : 7
Subtree with largest sum is :
 -2

 / \

4   5
Also, entire tree sum is also 7.
A-1-
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxSubtreeSum(root):
    global max_sum
    max_sum = float('-inf')

    def dfs(node):
        nonlocal max_sum
        if node is None:
            return 0

        left_sum = dfs(node.left)
        right_sum = dfs(node.right)
        current_sum = node.val + left_sum + right_sum

        max_sum = max(max_sum, current_sum)

        return current_sum

    dfs(root)
    return max_sum








Q-2-Construct the BST (Binary Search Tree) from its given level order traversal.
Example:
Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}
Output: BST:
            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10
A-2-
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def constructBST(arr):
    if not arr:
        return None

    root = TreeNode(arr[0])
    queue = [root]
    i = 1

    while queue and i < len(arr):
        node = queue.pop(0)

        if i < len(arr):
            node.left = TreeNode(arr[i])
            queue.append(node.left)
            i += 1

        if i < len(arr):
            node.right = TreeNode(arr[i])
            queue.append(node.right)
            i += 1

    return root




Q-3-Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary
Search Tree or not.
Examples:
Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}
Output1 : Yes
For the given arr[], the Binary Search Tree is:
            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10
Input2 : arr[] = {11, 6, 13, 5, 12, 10}
Output2 : No
The given arr[] does not represent the level order traversal of a BST.
A-3-
def isLevelOrderBST(arr):
    n = len(arr)
    if n <= 1:
        return True

    min_value = float('-inf')
    max_value = float('inf')

    for i in range(1, n):
        if arr[i] < min_value or arr[i] > max_value:
            return False

        if arr[i] < arr[i-1]:
            max_value = arr[i-1]
        else:
            min_value = arr[i-1]

    return True




















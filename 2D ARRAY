Q-1-Convert 1D Array Into 2D Array
You are given a **0-indexed** 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a
2-dimensional (2D) array with Â m rows and n columns using **all** the elements from original.
The elements from indices 0 to n - 1 (**inclusive**) of original should form the first row of the constructed 2D array, the elements
from indices n to 2 * n - 1 (**inclusive**) should form the second row of the constructed 2D array, and so on.
Return *an* m x n *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.
A-1-
def construct2DArray(original, m, n):
    if len(original) != m * n:
        return []
    
    result = []
    for i in range(m):
        row = original[i * n : (i + 1) * n]
        result.append(row)
    
    return result

# Example usage
original = [1, 2, 3, 4, 5, 6]
m = 2
n = 3
result = construct2DArray(original, m, n)
print(result)  # Output: [[1, 2, 3], [4, 5, 6]]



Q-2-You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has 
exactly i coins. The last row of the staircase **may be** incomplete.
Given the integer n, return *the number of **complete rows** of the staircase you will build*.
A-2-
def arrangeCoins(n):
    k = 0
    while n >= k:
        k += 1
        n -= k

    return k - 1

# Example usage
n = 5
result = arrangeCoins(n)
print(result)  # Output: 2


Q-3-Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing
order.
A-3-
def sortedSquares(nums):
    n = len(nums)
    result = [0] * n
    left = 0
    right = n - 1
    index = n - 1

    while left <= right:
        if abs(nums[left]) > abs(nums[right]):
            result[index] = nums[left] ** 2
            left += 1
        else:
            result[index] = nums[right] ** 2
            right -= 1
        index -= 1

    return result

# Example usage
nums = [-4, -1, 0, 3, 10]
result = sortedSquares(nums)
print(result)  # Output: [0, 1, 9, 16, 100]






Q-4-Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*
- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.
**Note** that the integers in the lists may be returned in **any** order.
A-4-
def findDisappearedNumbers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    distinct_nums1 = list(set1 - set2)
    distinct_nums2 = list(set2 - set1)

    return [distinct_nums1, distinct_nums2]

# Example usage
nums1 = [1, 2, 3]
nums2 = [2, 4, 6]
result = findDisappearedNumbers(nums1, nums2)
print(result)  # Output: [[1, 3], [4, 6]]




Q-5-Given two integer arrays arr1 and arr2, and the integer d, *return the distance value between the two arrays*.
The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| 
<= d.
A-5
def findDistanceValue(arr1, arr2, d):
    distance = 0

    for num1 in arr1:
        is_valid = True
        for num2 in arr2:
            if abs(num1 - num2) <= d:
                is_valid = False
                break

        if is_valid:
            distance += 1

    return distance

# Example usage
arr1 = [4, 5, 8]
arr2 = [10, 9, 1, 2]
d = 3
result = findDistanceValue(arr1, arr2, d)
print(result)  # Output: 2



Q-6-Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears **once** 
or **twice**, return *an array of all the integers that appears **twice***.
You must write an algorithm that runs in O(n) time and uses only constant extra space.
A-6-
def findDuplicates(nums):
    result = []

    for num in nums:
        index = abs(num) - 1
        if nums[index] < 0:
            result.append(abs(num))
        else:
            nums[index] = -nums[index]

    return result

# Example usage
nums = [4, 3, 2, 7, 8, 2, 3, 1]
result = findDuplicates(nums)
print(result)  # Output: [2, 3]



Q-7-Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = 
[0,1,2,4,5,6,7] might become:
- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.
You must write an algorithm that runs in O(log n) time.
A-7-
def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]

# Example usage
nums = [4, 5, 6, 7, 0, 1, 2]
min_element = findMin(nums)
print(min_element)  # Output: 0





Q-8-An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in 
original, and then randomly **shuffling** the resulting array.
Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty
array. The elements in* original *may be returned in **any** order*.
A-8-
def findOriginalArray(changed):
    if len(changed) % 2 != 0:
        return []  # If changed has an odd length, it cannot be a doubled array

    original = []
    values = set(changed)

    for num in changed:
        if num % 2 == 0 and num // 2 in values:
            values.remove(num // 2)
            original.append(num // 2)

        elif num * 2 in values:
            values.remove(num * 2)
            original.append(num)

        else:
            return []  # changed is not a doubled array

    return original

# Example usage
changed = [1, 2, 2, 4, 4, 8]
original = findOriginalArray(changed)
print(original)  # Output: [1, 2, 4]





















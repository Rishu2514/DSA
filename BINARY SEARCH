Q-1-Given a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should
be **non-negative** as well.
You **must not use** any built-in exponent function or operator.
- For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.
A-1-
def mySqrt(x):
    if x < 2:
        return x

    left = 1
    right = x // 2

    while left <= right:
        mid = left + (right - left) // 2
        square = mid * mid

        if square == x:
            return mid
        elif square < x:
            left = mid + 1
        else:
            right = mid - 1

    return right

# Test the function
x = 16
result = mySqrt(x)
print(result)  # Output: 4






Q-2-A peak element is an element that is strictly greater than its neighbors.
Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the 
index to **any of the peaks**.
You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor 
that is outside the array.
You must write an algorithm that runs in `O(log n)` time.
A-2-
def findPeakElement(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1

    return left

# Test the function
nums = [1, 2, 3, 1]
result = findPeakElement(nums)
print(result)  # Output: 2






Q-3-Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the
array.
A-3-
def missingNumber(nums):
    missing = len(nums)  # Initialize missing as the maximum possible number

    for i in range(len(nums)):
        missing ^= i ^ nums[i]  # XOR the current index and value with missing

    return missing

# Test the function
nums = [3, 0, 1]
result = missingNumber(nums)
print(result)  # Output: 2





Q-4-Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.
There is only **one repeated number** in `nums`, return *this repeated number*.
You must solve the problem **without** modifying the array `nums` and uses only constant extra space.
A-4-
def findDuplicate(nums):
    slow = nums[0]  # Start with the first element
    fast = nums[0]  # Start with the first element

    # Move slow by one step and fast by two steps until they meet
    while True:
        slow = nums[slow]  # Move slow by one step
        fast = nums[nums[fast]]  # Move fast by two steps

        if slow == fast:
            break

    # Move slow back to the first element and move both slow and fast by one step until they meet again
    slow = nums[0]
    while slow != fast:
        slow = nums[slow]  # Move slow by one step
        fast = nums[fast]  # Move fast by one step

    return slow

# Test the function
nums = [1, 3, 4, 2, 2]
result = findDuplicate(nums)
print(result)  # Output: 2





Q-5-Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you
may return the result in any order.
A-5-
def intersection(nums1, nums2):
    # Create sets from the arrays
    set1 = set(nums1)
    set2 = set(nums2)

    # Find the intersection of the sets
    intersect = set1.intersection(set2)

    # Convert the intersection set to a list
    result = list(intersect)

    return result

# Test the function
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersection(nums1, nums2)
print(result)  # Output: [2]






Q-6-Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums
= [0,1,2,4,5,6,7]` might become:
- `[4,5,6,7,0,1,2]` if it was rotated `4` times.
- `[0,1,2,4,5,6,7]` if it was rotated `7` times.
Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., 
a[n-2]]`.
Given the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.
You must write an algorithm that runs in `O(log n) time.`
A-6-
def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]

# Test the function
nums = [4, 5, 6, 7, 0, 1, 2]
min_element = findMin(nums)
print(min_element)  # Output: 0





Q-7-Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.
If `target` is not found in the array, return `[-1, -1]`.
You must write an algorithm with `O(log n)` runtime complexity.
A-7-
def searchRange(nums, target):
    start = findLeftMost(nums, target)
    end = findRightMost(nums, target)
    return [start, end]

def findLeftMost(nums, target):
    left = 0
    right = len(nums) - 1
    index = -1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] >= target:
            right = mid - 1
        else:
            left = mid + 1

        if nums[mid] == target:
            index = mid

    return index

def findRightMost(nums, target):
    left = 0
    right = len(nums) - 1
    index = -1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] <= target:
            left = mid + 1
        else:
            right = mid - 1

        if nums[mid] == target:
            index = mid

    return index

# Test the function
nums = [1, 2, 2, 3, 3, 3, 4, 5]
target = 3
result = searchRange(nums, target)
print(result)  # Output: [3, 5]






Q-8-Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many 
times as it shows in both arrays and you may return the result in any order.
A-8-
def intersect(nums1, nums2):
    # Create a hash map to store the frequency of elements in nums1
    freq_map = {}
    result = []

    # Count the frequency of elements in nums1
    for num in nums1:
        freq_map[num] = freq_map.get(num, 0) + 1

    # Find common elements in nums2 and update the result list
    for num in nums2:
        if num in freq_map and freq_map[num] > 0:
            result.append(num)
            freq_map[num] -= 1

    return result

# Test the function
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersect(nums1, nums2)
print(result)  # Output: [2, 2]



























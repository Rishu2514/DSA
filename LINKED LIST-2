Q-1-Given two linked list of the same size, the task is to create a new linked list using those linked lists. The condition is that 
the greater node among both linked list will be added to the new linked list.
A-1-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def create_new_linked_list(head1, head2):
    new_head = None
    current = None

    while head1 and head2:
        if head1.value >= head2.value:
            new_node = Node(head1.value)
            head1 = head1.next
        else:
            new_node = Node(head2.value)
            head2 = head2.next
        
        if not new_head:
            new_head = new_node
            current = new_head
        else:
            current.next = new_node
            current = current.next
    
    while head1:
        new_node = Node(head1.value)
        if not new_head:
            new_head = new_node
            current = new_head
        else:
            current.next = new_node
            current = current.next
        head1 = head1.next
    
    while head2:
        new_node = Node(head2.value)
        if not new_head:
            new_head = new_node
            current = new_head
        else:
            current.next = new_node
            current = current.next
        head2 = head2.next
    
    return new_head




Q-2-Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should 
only be traversed once.
For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.
A-2-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def removeDuplicates(head):
    # If the list is empty or has only one node, return it as it is
    if not head or not head.next:
        return head

    current = head
    while current.next:
        # Compare the value of the current node with the value of the next node
        if current.value == current.next.value:
            # Skip the next node by changing the 'next' pointer
            current.next = current.next.next
        else:
            # Move to the next node
            current = current.next
    
    return head





Q-3-Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If
the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed
(See Example 2 for clarification).
A-3-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverse(head):
    if not head or not head.next:
        return head

    current = head
    prev = None

    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node

    return prev

def reverseKNodes(head, k):
    if not head or not head.next or k == 1:
        return head

    current = head
    prev = None
    start = None
    end = None
    count = 0

    while current:
        count += 1

        if count == 1:
            start = current

        if count == k:
            end = current
            next_node = current.next
            current.next = None

            reversed_head = reverse(start)

            if prev:
                prev.next = reversed_head
            else:
                head = reversed_head

            start.next = next_node
            prev = start

            count = 0
            current = next_node
        else:
            current = current.next

    if count > 0:
        reversed_head = reverse(start)
        prev.next = reversed_head

    return head






Q-4-Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way
Give the complexity of your algorithm.
A-4-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverse(head):
    if not head or not head.next:
        return head

    current = head
    prev = None

    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node

    return prev

def reverseAlternateKNodes(head, k):
    if not head or not head.next or k == 1:
        return head

    current = head
    prev = None
    start = None
    end = None
    count = 0
    reverse_group = True

    while current:
        count += 1

        if count == 1:
            start = current

        if count == k:
            end = current
            next_node = current.next
            current.next = None

            if reverse_group:
                reversed_head = reverse(start)

                if prev:
                    prev.next = reversed_head
                else:
                    head = reversed_head

                start.next = next_node
                prev = start
            else:
                prev = end
                prev.next = next_node

            count = 0
            current = next_node
            reverse_group = not reverse_group
        else:
            current = current.next

    return head






Q-5-Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.
A-5-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def deleteLastOccurrence(head, key):
    if not head:
        return head

    prev = None
    last = None
    current = head
    found = False

    while current:
        if current.value == key:
            found = True
            prev = last
            last = current
        elif current.next and current.next.value == key:
            prev = current
            last = current.next
        
        current = current.next
    
    if not found:
        return head
    
    if last == head:
        head = head.next
    else:
        prev.next = last.next

    return head







Q-6-Given two sorted linked lists consisting of **N** and **M** nodes respectively. The task is to merge both of the lists (in place)
and return the head of the merged list.
**Examples:**
Input: a: 5->10->15, b: 2->3->20
Output: 2->3->5->10->15->20
Input: a: 1->1, b: 2->4
Output: 1->1->2->4
A-6-
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def mergeLinkedLists(a, b):
    if not a:
        return b
    if not b:
        return a

    if a.value <= b.value:
        head = a
        a = a.next
    else:
        head = b
        b = b.next

    prev = head
    current = head

    while a and b:
        if a.value <= b.value:
            current.next = a
            a = a.next
        else:
            current.next = b
            b = b.next

        current = current.next

    if a:
        current.next = a
    else:
        current.next = b

    return head





Q-7-Given a Doubly Linked List, the task is to reverse the given Doubly Linked List.
A-7-
class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None

def reverseDoublyLinkedList(head):
    if not head or not head.next:
        return head

    current = head
    prev = None

    while current:
        next_node = current.next
        current.next = prev
        current.prev = next_node
        prev = current
        current = next_node

    return prev






Q-8-Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.
A-8-
class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None

def deleteNodeFromPosition(head, position):
    if not head:
        return head

    if position == 1:
        if head.next:
            head.next.prev = None
        head = head.next
        return head

    current = head
    count = 1

    while count < position and current:
        current = current.next
        count += 1

    if not current:
        return head

    if current.next:
        current.next.prev = current.prev

    if current.prev:
        current.prev.next = current.next

    return head





















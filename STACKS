Q-1-Given an array arr[ ] of size N having elements, the task is to find the next greater element for each element of the array in 
order of their appearance in the array.Next greater element of an element in the array is the nearest element on the right which is
greater than the current element.If there does not exist next greater of current element, then next greater element for current
element is -1.
For example, next greater of the last element is always -1.
A-1-
def nextGreaterElement(arr):
    stack = []
    result = []

    for i in range(len(arr) - 1, -1, -1):
        while stack and stack[-1] <= arr[i]:
            stack.pop()

        if not stack:
            result.append(-1)
        else:
            result.append(stack[-1])

        stack.append(arr[i])

    result.reverse()
    return result







Q-2-Given an array a of integers of length n, find the nearest smaller number for every element such that the smaller element is on 
left side.If no small element present on the left print -1.
A-2-
def nearestSmallerNumbers(arr):
    stack = []
    result = []

    for i in range(len(arr)):
        while stack and stack[-1] >= arr[i]:
            stack.pop()

        if not stack:
            result.append(-1)
        else:
            result.append(stack[-1])

        stack.append(arr[i])

    return result





Q-3-Implement a Stack using two queues **q1** and **q2**.
**Example 1:**
Input:
push(2)
push(3)
pop()
push(4)
pop()
Output:3 4
Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   poped element will be 3 the
        stack will be {2}
push(4) the stack will be {2 4}
pop()   poped element will be 4
Example 2:
Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see
the smaller numbers. But for 4 the smaller
numbers are 1, 0 and 3. But among them 3
is closest. Similary for 5 it is 4.
A-3-
from queue import Queue

class Stack:
    def __init__(self):
        self.q1 = Queue()
        self.q2 = Queue()

    def push(self, element):
        self.q1.put(element)

    def pop(self):
        if self.isEmpty():
            return -1

        while self.q1.qsize() > 1:
            self.q2.put(self.q1.get())

        popped_element = self.q1.get()

        self.q1, self.q2 = self.q2, self.q1

        return popped_element

    def top(self):
        if self.isEmpty():
            return -1

        while self.q1.qsize() > 1:
            self.q2.put(self.q1.get())

        top_element = self.q1.get()

        self.q2.put(top_element)

        self.q1, self.q2 = self.q2, self.q1

        return top_element

    def isEmpty(self):
        return self.q1.empty() and self.q2.empty()










Q-4-You are given a stack St. You have to reverse the stack using recursion.
Example 1:
Input:St = {3,2,1,7,6}
Output:{6,7,1,2,3}
Example 2:
Input:St = {4,3,9,6}
Output:{6,9,3,4}
A-4-
def reverseStack(St):
    if St.empty() or St.qsize() == 1:
        return St

    topElement = St.get()

    reversedStack = reverseStack(St)

    insertAtBottom(reversedStack, topElement)

    return reversedStack

def insertAtBottom(St, element):
    if St.empty():
        St.put(element)
    else:
        temp = St.get()
        insertAtBottom(St, element)
        St.put(temp)





Q-5-You are given a string S, the task is to reverse the string using stack.
Input: S="GeeksforGeeks"
Output: skeeGrofskeeG
A-5-
def reverseString(S):
    stack = []
    for char in S:
        stack.append(char)

    reversedString = ""
    while stack:
        reversedString += stack.pop()

    return reversedString
S = "GeeksforGeeks"
reversedS = reverseString(S)
print(reversedS)  # Output: skeeGrofskeeG







Q-6-Given string S representing a postfix expression, the task is to evaluate the expression and find the final value. Operators will 
only include the basic arithmetic operators like *, /, + and -.
Example 1:
Input: S = "231*+9-"
Output: -4
Explanation:
After solving the given expression,
we have -4 as result.
Example 2:
Input: S = "123+*8-"
Output: -3
Explanation:
After solving the given postfix
expression, we have -3 as result.
A-6-
def evaluatePostfixExpression(S):
    stack = []

    for char in S:
        if char.isdigit():
            stack.append(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            result = performOperation(operand1, operand2, char)
            stack.append(result)

    return stack.pop()

def performOperation(operand1, operand2, operator):
    if operator == '+':
        return operand1 + operand2
    elif operator == '-':
        return operand1 - operand2
    elif operator == '*':
        return operand1 * operand2
    elif operator == '/':
        return operand1 / operand2

S = "231*+9-"
result = evaluatePostfixExpression(S)
print(result)  # Output: -4
S = "123+*8-"
result = evaluatePostfixExpression(S)
print(result)  # Output: -3








Q-7-Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
Implement the `MinStack` class:
- `MinStack()` initializes the stack object.
- `void push(int val)` pushes the element `val` onto the stack.
- `void pop()` removes the element on the top of the stack.
- `int top()` gets the top element of the stack.
- `int getMin()` retrieves the minimum element in the stack.
You must implement a solution with `O(1)` time complexity for each function.
A-7-
class MinStack:
    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, val):
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self):
        if self.stack[-1] == self.min_stack[-1]:
            self.min_stack.pop()
        self.stack.pop()

    def top(self):
        return self.stack[-1]

    def getMin(self):
        return self.min_stack[-1]








Q-8-Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap 
after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain 
water (blue section) are being trapped.
Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
A-8-
def trap(height):
    left = 0
    right = len(height) - 1
    left_max = right_max = water = 0

    while left <= right:
        if height[left] <= height[right]:
            if height[left] > left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] > right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1

    return water















Q-1-Given preorder of a binary tree, calculate its **[depth(or height)](https://www.geeksforgeeks.org/write-a-c-program-to-find-the-
maximum-depth-or-height-of-a-tree/)** [starting from depth 0]. The preorder is given as a string with two possible characters.
1. ‘l’ denotes the leaf
2. ‘n’ denotes internal node
The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can ‘n’ or ‘l’ or
mix of both.
**Examples :**
Input  : nlnll
Output : 2
A-1-
def calculateDepth(preorder, start):
    if start >= len(preorder) or preorder[start] == 'l':
        return 0
    
    start += 1
    left_depth = calculateDepth(preorder, start)
    start += left_depth
    right_depth = calculateDepth(preorder, start)

    return max(left_depth, right_depth) + 1

# Example usage
preorder = "nlnll"

depth = calculateDepth(preorder, 0)
print("Depth of the binary tree:", depth)






Q-2-Given a Binary tree, the task is to print the **left view** of the Binary Tree. The left view of a Binary Tree is a set of 
leftmost nodes for every level.
**Examples:**
***Input:***
            4

          /   \

        5     2

             /   \

            3     1

           /  \

          6    7
***Output:** 4 5 3 6*
***Input:***
                    1

                  /   \

                2       3

                 \

                   4

                     \

                        5

                           \

                             6
**Output:** 1 2 4 5 6
A-2-
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def printLeftView(root):
    if root is None:
        return

    level_dict = {}
    queue = [(root, 0)]

    while queue:
        node, level = queue.pop(0)

        if level not in level_dict:
            print(node.val, end=" ")
            level_dict[level] = True

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))

# Example usage
# Create the binary tree
root = TreeNode(4)
root.left = TreeNode(5)
root.right = TreeNode(2)
root.right.left = TreeNode(3)
root.right.right = TreeNode(1)
root.right.left.left = TreeNode(6)
root.right.left.right = TreeNode(7)

# Print the left view
print("Left view of the binary tree:", end=" ")
printLeftView(root)







Q-3-Given a Binary Tree, print the Right view of it.
The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.
**Examples:**
**Input:**
         1

      /     \

   2         3

/   \       /  \

4     5   6    7

             \

               8
**Output**: 
Right view of the tree is 1 3 7 8
**Input:**
1
       /

    8

  /

7
**Output**: 
Right view of the tree is 1 8 7
A-3-
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def printRightView(root):
    if root is None:
        return

    level_dict = {}
    queue = [(root, 0)]

    while queue:
        node, level = queue.pop(0)

        level_dict[level] = node.val

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))

    for level in sorted(level_dict.keys()):
        print(level_dict[level], end=" ")

# Example usage
# Create the binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)
root.right.right.right = TreeNode(8)

# Print the right view
print("Right view of the binary tree:", end=" ")
printRightView(root)









Q-4-Given a Binary Tree, The task is to print the **bottom view** from left to right. A node **x** is there in output if x is the 
bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance 
of x minus 1, and that of a right child is the horizontal distance of x plus 1.
**Examples:**
**Input:**
             20

           /     \

        8         22

    /      \         \

5         3        25

        /    \

   10       14
**Output:** 5, 10, 3, 14, 25.
**Input:**
             20

           /     \

        8         22

    /      \      /   \

 5         3    4     25

         /    \

     10       14
**Output:**
5 10 4 14 25.
**Explanation:**
If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.
**3 and 4** are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.
A-4-
class TreeNode:
    def __init__(self, val=0, hd=0, left=None, right=None):
        self.val = val
        self.hd = hd
        self.left = left
        self.right = right

def printBottomView(root):
    if root is None:
        return

    horizontal_dict = {}
    queue = [(root, 0)]

    while queue:
        node, hd = queue.pop(0)

        horizontal_dict[hd] = node.val

        if node.left:
            queue.append((node.left, hd - 1))
        if node.right:
            queue.append((node.right, hd + 1))

    for hd in sorted(horizontal_dict.keys()):
        print(horizontal_dict[hd], end=" ")

# Example usage
# Create the binary tree
root = TreeNode(20)
root.left = TreeNode(8)
root.right = TreeNode(22)
root.left.left = TreeNode(5)
root.left.right = TreeNode(3)
root.right.right = TreeNode(25)
root.left.right.left = TreeNode(10)
root.left.right.right = TreeNode(14)

# Print the bottom view
print("Bottom view of the binary tree:", end=" ")
printBottomView(root)


























